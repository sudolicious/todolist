name: $(Date:yyyyMMdd)

trigger:
  branches:
    include:
      - main

pool: Default

variables:
  imageName: 'sudolicious1/todolist-backend'

stages:
- stage: GetVersion
  displayName: 'üîñ Get Version'
  jobs:
  - job: getVersion
    displayName: 'Get version with GitVersion'
    steps:
    - checkout: self
      fetchDepth: 0
      persistCredentials: true
      clean: true
      fetchTags: true

    - script: |
        VERSION=$(dotnet exec /home/olga/.dotnet/tools/.store/gitversion.tool/6.4.0/gitversion.tool/6.4.0/tools/net8.0/any/gitversion.dll /showvariable MajorMinorPatch)
        CURRENT_DATE=$(date +%Y%m%d)

        echo "##vso[build.updatebuildnumber]${CURRENT_DATE}-${VERSION}"
        echo "##vso[task.setvariable variable=appVersion;isOutput=true]$VERSION"
        echo "Detected AppVersion: $VERSION"
      name: setVersion
      displayName: 'Get version using GitVersion'

- stage: SecurityScan
  displayName: 'üîí Security Scan'
  dependsOn: GetVersion
  variables:
    appVersion: $[ stageDependencies.GetVersion.getVersion.outputs['setVersion.appVersion'] ]
  jobs:
  - job: securityScan
    displayName: 'Basic Security Checks'
    steps:
    - checkout: self
    - script: |
        echo "Running security scan for version: $(appVersion)"
        echo "Running gosec security scan..."
        gosec -no-fail -exclude-dir=test_integration ./...
        echo "Running go vet..."
        go vet ./...
        echo "Verifying dependencies..."
        go mod verify
        echo "‚úÖ Security scan completed"
      displayName: 'Run security scans'
      workingDirectory: backend

- stage: Build
  displayName: 'üèóÔ∏è Build Docker Image'
  dependsOn: SecurityScan
  variables:
    appVersion: $[ stageDependencies.GetVersion.getVersion.outputs['setVersion.appVersion'] ]
  jobs:
  - job: build
    displayName: 'Build image'
    steps:
    - checkout: self
    - script: echo "DEBUG: appVersion=$(appVersion)"
      displayName: 'Debug appVersion'

    - task: Docker@2
      inputs:
        command: 'build'
        repository: '$(imageName)'
        dockerfile: 'backend/Dockerfile'
        buildContext: 'backend'
        tags: |
          $(appVersion)
          latest
      displayName: 'Build Docker image'

- stage: Push
  displayName: 'üöÄ Push to Docker Hub'
  dependsOn: Build
  condition: succeeded()
  variables:
    appVersion: $[ stageDependencies.GetVersion.getVersion.outputs['setVersion.appVersion'] ]
  jobs:
  - job: push
    displayName: 'Push image'
    steps:
    - script: echo "DEBUG: appVersion=$(appVersion)"
      displayName: 'Debug appVersion before push'

    - task: Docker@2
      inputs:
        command: 'login'
        containerRegistry: 'docker-hub-connection'
      displayName: 'Login to Docker Hub'

    - task: Docker@2
      inputs:
        command: 'push'
        repository: '$(imageName)'
        tags: |
          $(appVersion)
          latest
      displayName: 'Push Docker image'
